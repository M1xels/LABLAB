# Generated by Django 4.0.3 on 2022-05-21 19:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='equipmentdevicel1',
            fields=[
                ('lab_num', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('pc_num', models.PositiveIntegerField()),
                ('system_unit', models.CharField(max_length=10, null=True)),
                ('monitor', models.CharField(max_length=10, null=True)),
                ('keyboard', models.CharField(max_length=10, null=True)),
                ('mouse', models.CharField(max_length=10, null=True)),
                ('avr', models.CharField(max_length=10, null=True)),
                ('remarks', models.CharField(choices=[('Good', 'Good'), ('Replace', 'Replace'), ('On-process', 'Onprocess')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='hardware_reports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('Lab_num', models.CharField(choices=[('LABORATORY 1', 'LABORATORY 1'), ('LABORATORY 2', 'LABORATORY 2'), ('LABORATORY 3', 'LABORATORY 3'), ('LABORATORY 4', 'LABORATORY 4')], max_length=50)),
                ('Pc_num', models.IntegerField()),
                ('System_unit', models.CharField(max_length=10, null=True)),
                ('Monitor', models.CharField(max_length=10, null=True)),
                ('keyboard', models.CharField(max_length=10, null=True)),
                ('Mouse', models.CharField(max_length=10, null=True)),
                ('Avr', models.CharField(max_length=10, null=True)),
                ('Comments', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='homepage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Section_name', models.CharField(max_length=50)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('Time_in', models.TimeField()),
                ('Time_out', models.TimeField()),
                ('Status', models.CharField(choices=[('AVAILABLE ', 'AVAILABLE '), ('OCCUPIED ', 'OCCUPIED ')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='perform_request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('name', models.CharField(max_length=100)),
                ('Lab_num', models.CharField(max_length=50)),
                ('Pc_num', models.PositiveIntegerField()),
                ('Type_report', models.CharField(max_length=100)),
                ('remarks', models.CharField(max_length=300)),
                ('status', models.CharField(choices=[('Ongoing', 'Ongoing'), ('Available to use', 'Available to use')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='software_reports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('User_name', models.CharField(max_length=100)),
                ('Lab_num', models.CharField(choices=[('LABORATORY 1', 'LABORATORY 1'), ('LABORATORY 2', 'LABORATORY 2'), ('LABORATORY 3', 'LABORATORY 3'), ('LABORATORY 4', 'LABORATORY 4')], max_length=50)),
                ('Pc_num', models.IntegerField()),
                ('Type_concern', models.CharField(choices=[('Request', 'Request'), ('Complain', 'Complain'), ('Suggest', 'Suggest'), ('Others', 'Others')], max_length=50)),
                ('Message', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='register1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Job_description', models.CharField(choices=[('Computer Instructor', 'Computer Instructor'), ('UITC Staff', 'UITC Staff')], max_length=40)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='index',
            fields=[
                ('id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, unique=True)),
                ('User_name', models.CharField(max_length=50)),
                ('Password_data', models.CharField(default='', max_length=40, unique=True)),
            ],
        ),
    ]
